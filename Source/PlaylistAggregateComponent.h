/*
  ==============================================================================

    PlaylistAggregateComponent.h
    Created: 12 Aug 2020 9:59:38pm
    Author:  david

  ==============================================================================
*/

#pragma once

#include <JuceHeader.h>
#include "PlaylistGrid.h"
#include "PlaylistToolbar.h"
#include "ExternalCallbackActionListener.h"
#include "ExternalCallbackTextEditorListener.h"

//==============================================================================

/// <summary>
/// Aggregate UI component, controlling all the UI parts necessary for the Playlist to work
/// </summary>
class PlaylistAggregateComponent  :
	public juce::Component,
    public TextEditor::Listener

{
public:
    /// <summary>
    /// Constructor for the class. Creates an instance of the class
    /// </summary>
    PlaylistAggregateComponent();
    ~PlaylistAggregateComponent() override;

	//Overloads for the virtual methods inherited by the Component class
    void paint (juce::Graphics&) override;
    void resized() override;


    /// <summary>
    /// Broadcaster to notify the selection of a track from the playlist
    /// </summary>
    ActionBroadcaster trackSelectedToPlayEventBroadcaster;
private:
    //Name of the folder containing the application data
    const static String _AppFolderName;
	//Name of the playlist file extension
    const static String _PlayListFileExtension;
	//Full path of the folder containing the application data.
	//This is where the playlist files are saved
    const static String _AppFolderFullPath();

	//Component displaying the Playlist grid
    PlaylistGrid playlistGrid;
	//Component displaying the Playlist toolbar
    PlaylistToolbar playlistToolbar;
	//Component displaying the Text field to search for files in the playlist
    TextEditor searchBox;

	//Listeners for events generated by the Playlist Toolbar
	//Listener for the Add File Event
    ExternalCallbackActionListener addFileListener;
    //Listener for the Add Folder Event
    ExternalCallbackActionListener addFolderListener;
    //Listener for the Delete File Event
    ExternalCallbackActionListener deleteFilesListener;
    //Listener for the Load Playlist Event
    ExternalCallbackActionListener loadPlaylistListener;
    //Listener for the Save Playlist Event
    ExternalCallbackActionListener savePlaylistListener;
    //Listener for the Open File In Player Event
    ExternalCallbackActionListener openFileInPlayerListener;

    //Listener for the double-click event on an item in the grid
    ExternalCallbackActionListener itemDoubleClickedListener;

    //Listener for the change of text in the search text field
    ExternalCallbackTextEditorListener searchTextChangedListener;

    //Callbacks for the events generated by the playlist toolbar
	/// <summary>
	/// Callback invoked when the Add File button is pressed
	/// </summary>
	/// <param name="message">String message describing the event</param>
    void addFileCallback(const String& message);
    /// <summary>
    /// Callback invoked when the Add Folder button is pressed
    /// </summary>
    /// <param name="message">String message describing the event</param>
    void addFolderCallback(const String& message) const;
    /// <summary>
    /// Callback invoked when the Delete File button is pressed
    /// </summary>
    /// <param name="message">String message describing the event</param>
    void deleteFilesCallback(const String& message);
    /// <summary>
    /// Callback invoked when the Load Playlist button is pressed
    /// </summary>
    /// <param name="message">String message describing the event</param>
    void loadPlaylistCallback(const String& message);
    /// <summary>
    /// Callback invoked when the Save Playlist button is pressed
    /// </summary>
    /// <param name="message">String message describing the event</param>
    void savePlaylistCallback(const String& message) const;
    /// <summary>
    /// Callback invoked when the Open File in Player button is pressed
    /// </summary>
    /// <param name="message">String message describing the event</param>
    void openFileInPlayerCallback(const String& message);

    /// <summary>
    /// Callback invoked when an item in the grid is double-clicked
    /// </summary>
    /// <param name="message">String message describing the event</param>
    void itemDoubleClickedCallback(const String& message) const;
    /// <summary>
    /// Callback invoked when the some text is added to the search field
    /// </summary>
    /// <param name="message">String message describing the event</param>
    void searchTextChangedCallback(const String& message);
	
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (PlaylistAggregateComponent)
};
